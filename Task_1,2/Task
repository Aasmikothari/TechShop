Task 1: Classes and Their Attributes:

You are working as a software developer for TechShop, a company that sells electronic gadgets. Your task is to design and implement an application using Object-Oriented Programming (OOP) principles to manage customer information, product details, and orders. Below are the classes you need to create:

Customers Class:

Attributes: 
• CustomerID (int) 
• FirstName (string) 
• LastName (string) 
• Email (string) 
• Phone (string) 
• Address (string)

Methods: 
• CalculateTotalOrders(): Calculates the total number of orders placed by this customer. 
• GetCustomerDetails(): Retrieves and displays detailed information about the customer. 
• UpdateCustomerInfo(): Allows the customer to update their information (e.g., email, phone, or address).

Products Class:

Attributes: 
• ProductID (int) 
• ProductName (string) 
• Description (string) 
• Price (decimal)

Methods: 
• GetProductDetails(): Retrieves and displays detailed information about the product. 
• UpdateProductInfo(): Allows updates to product details (e.g., price, description). 
• IsProductInStock(): Checks if the product is currently in stock.

Orders Class:

Attributes: 
• OrderID (int) 
• Customer (Customer) - Use composition to reference the Customer who placed the order. 
• OrderDate (DateTime) • TotalAmount (decimal)

Methods: 
• CalculateTotalAmount() - Calculate the total amount of the order. 
• GetOrderDetails(): Retrieves and displays the details of the order (e.g., product list and quantities). 
• UpdateOrderStatus(): Allows updating the status of the order (e.g., processing, shipped). 
• CancelOrder(): Cancels the order and adjusts stock levels for products.

OrderDetails Class:

Attributes: 
• OrderDetailID (int) 
• Order (Order) - Use composition to reference the Order to which this detail belongs. 
• Product (Product) - Use composition to reference the Product included in the order detail. 
• Quantity (int)

Methods: 
• CalculateSubtotal() - Calculate the subtotal for this order detail. 
• GetOrderDetailInfo(): Retrieves and displays information about this order detail. 
• UpdateQuantity(): Allows updating the quantity of the product in this order detail. 
• AddDiscount(): Applies a discount to this order detail.

Inventory class:

Attributes: 
• InventoryID(int) 
• Product (Composition): The product associated with the inventory item. 
• QuantityInStock: The quantity of the product currently in stock. 
• LastStockUpdate

Methods: 
• GetProduct(): A method to retrieve the product associated with this inventory item. 
• GetQuantityInStock(): A method to get the current quantity of the product in stock. 
• AddToInventory(int quantity): A method to add a specified quantity of the product to the inventory. 
• RemoveFromInventory(int quantity): A method to remove a specified quantity of the product from the inventory. 
• UpdateStockQuantity(int newQuantity): A method to update the stock quantity to a new value. 
• IsProductAvailable(int quantityToCheck): A method to check if a specified quantity of the product is available in the inventory. 
• GetInventoryValue(): A method to calculate the total value of the products in the inventory based on their prices and quantities. 
• ListLowStockProducts(int threshold): A method to list products with quantities below a specified threshold, indicating low stock. 
• ListOutOfStockProducts(): A method to list products that are out of stock. 
• ListAllProducts(): A method to list all products in the inventory, along with their quantities.

Task 2: Class Creation:

• Create the classes (Customers, Products, Orders, OrderDetails and Inventory) with the specified attributes. 
• Implement the constructor for each class to initialize its attributes. 
• Implement methods as specified.
